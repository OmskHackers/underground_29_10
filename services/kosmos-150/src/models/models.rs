// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]

use diesel::{RunQueryDsl, QueryDsl, ExpressionMethods};
use diesel::prelude::{Queryable, Insertable};
use crate::schema::users;

use crate::{error::ClientError, pkg::db};

#[derive(Queryable, Insertable, Debug)]
pub struct User {
    pub id: i32,
    pub username: String,
    pub password: String,
}

impl User {
    pub fn create(user: User) -> Result<Self, ClientError> {
        let conn_res = db::connection();
        match conn_res {
            Ok(mut conn) => {
                let res = diesel::insert_into(users::table)
                    .values(user)
                    .get_result(&mut conn);
                match res {
                    Ok(u)=> Ok(u),
                    Err(e) => Err(ClientError::new(e.to_string()))
                } 
            }
            Err(e) => Err(ClientError::new(e.to_string()))
        }
    }
    pub fn find(username: String, password: String) -> Result<Self, ClientError> {
        let conn_res = db::connection();
        match conn_res {
            Ok(mut conn) => {
                let res = users::table
                    .filter(users::username.eq(username))
                    .filter(users::password.eq(password))
                    .first(&mut conn);
                match res {
                    Ok(user) => Ok(user),
                    Err(e) => Err(ClientError::new(e.to_string()))
                }
            }
            Err(e) => Err(ClientError::new(e.to_string()))
        }
    }

    pub fn get_username(&self) -> String {
        self.username.clone()
    }
}

#[derive(Queryable, Debug)]
pub struct Spaceport {
    pub id: u32,
    pub name: String,
}